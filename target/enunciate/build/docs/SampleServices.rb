#
# 
#
# Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end


module Org

module Appfuse

module Model

  # 
  class BaseObject 


    # the json hash for this BaseObject
    def to_jaxb_json_hash
      _h = {}
      return _h
    end

    # the json (string form) for this BaseObject
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this BaseObject with a json hash
    def init_jaxb_json_hash(_o)
    end

    # constructs a BaseObject from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Org

module Appfuse

module Model

  # 
  class User < Org::Appfuse::Model::BaseObject 

    # (no documentation provided)
    attr_accessor :version
    # (no documentation provided)
    attr_accessor :accountLocked
    # (no documentation provided)
    attr_accessor :phoneNumber
    # (no documentation provided)
    attr_accessor :firstName
    # (no documentation provided)
    attr_accessor :lastName
    # (no documentation provided)
    attr_accessor :username
    # (no documentation provided)
    attr_accessor :credentialsExpired
    # (no documentation provided)
    attr_accessor :address
    # (no documentation provided)
    attr_accessor :accountExpired
    # (no documentation provided)
    attr_accessor :enabled
    # (no documentation provided)
    attr_accessor :email
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :website
    # (no documentation provided)
    attr_accessor :roles

    # the json hash for this User
    def to_jaxb_json_hash
      _h = super
      _h['version'] = version.to_jaxb_json_hash unless version.nil?
      _h['accountLocked'] = accountLocked.to_jaxb_json_hash unless accountLocked.nil?
      _h['phoneNumber'] = phoneNumber.to_jaxb_json_hash unless phoneNumber.nil?
      _h['firstName'] = firstName.to_jaxb_json_hash unless firstName.nil?
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      _h['username'] = username.to_jaxb_json_hash unless username.nil?
      _h['credentialsExpired'] = credentialsExpired.to_jaxb_json_hash unless credentialsExpired.nil?
      _h['address'] = address.to_jaxb_json_hash unless address.nil?
      _h['accountExpired'] = accountExpired.to_jaxb_json_hash unless accountExpired.nil?
      _h['enabled'] = enabled.to_jaxb_json_hash unless enabled.nil?
      _h['email'] = email.to_jaxb_json_hash unless email.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['website'] = website.to_jaxb_json_hash unless website.nil?
      if !roles.nil?
        _ha = Array.new
        roles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['roles'] = _ha
      end
      return _h
    end

    #initializes this User with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @version = Fixnum.from_json(_o['version']) unless _o['version'].nil?
      @accountLocked = Boolean.from_json(_o['accountLocked']) unless _o['accountLocked'].nil?
      @phoneNumber = String.from_json(_o['phoneNumber']) unless _o['phoneNumber'].nil?
      @firstName = String.from_json(_o['firstName']) unless _o['firstName'].nil?
      @lastName = String.from_json(_o['lastName']) unless _o['lastName'].nil?
      @username = String.from_json(_o['username']) unless _o['username'].nil?
      @credentialsExpired = Boolean.from_json(_o['credentialsExpired']) unless _o['credentialsExpired'].nil?
      @address = Org::Appfuse::Model::Address.from_json(_o['address']) unless _o['address'].nil?
      @accountExpired = Boolean.from_json(_o['accountExpired']) unless _o['accountExpired'].nil?
      @enabled = Boolean.from_json(_o['enabled']) unless _o['enabled'].nil?
      @email = String.from_json(_o['email']) unless _o['email'].nil?
      @id = Bignum.from_json(_o['id']) unless _o['id'].nil?
      @website = String.from_json(_o['website']) unless _o['website'].nil?
      if !_o['roles'].nil?
        @roles = Array.new
        _oa = _o['roles']
        _oa.each { | _item | @roles.push Org::Appfuse::Model::Role.from_json(_item) }
      end
    end

    # constructs a User from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Org

module Appfuse

module Model

  # 
  class Role < Org::Appfuse::Model::BaseObject 

    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :id

    # the json hash for this Role
    def to_jaxb_json_hash
      _h = super
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      return _h
    end

    #initializes this Role with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @description = String.from_json(_o['description']) unless _o['description'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @id = Bignum.from_json(_o['id']) unless _o['id'].nil?
    end

    # constructs a Role from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Org

module Appfuse

module Model

  # 
  class Address < Org::Appfuse::Model::BaseObject 

    # (no documentation provided)
    attr_accessor :province
    # (no documentation provided)
    attr_accessor :postalCode
    # (no documentation provided)
    attr_accessor :country
    # (no documentation provided)
    attr_accessor :city
    # (no documentation provided)
    attr_accessor :address

    # the json hash for this Address
    def to_jaxb_json_hash
      _h = super
      _h['province'] = province.to_jaxb_json_hash unless province.nil?
      _h['postalCode'] = postalCode.to_jaxb_json_hash unless postalCode.nil?
      _h['country'] = country.to_jaxb_json_hash unless country.nil?
      _h['city'] = city.to_jaxb_json_hash unless city.nil?
      _h['address'] = address.to_jaxb_json_hash unless address.nil?
      return _h
    end

    #initializes this Address with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @province = String.from_json(_o['province']) unless _o['province'].nil?
      @postalCode = String.from_json(_o['postalCode']) unless _o['postalCode'].nil?
      @country = String.from_json(_o['country']) unless _o['country'].nil?
      @city = String.from_json(_o['city']) unless _o['city'].nil?
      @address = String.from_json(_o['address']) unless _o['address'].nil?
    end

    # constructs a Address from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end
